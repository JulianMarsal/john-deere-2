# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

#Here begins the schema definition of Boundary
type Boundary {
  type: String
  name: String!
  sourceType: String
  createdTime: String
  modifiedTime: String
  area: Area
  workableArea: WorkableArea 
  multipolygons: [Polygon] 
  extent: Extent 
  archived: Boolean
  id: ID!
  active: Boolean
  irrigated: Boolean    
}

type Point {
  #type: String
  lat: Float!
  lon: Float!
}

type Area {
  type: String 
  valueAsDouble: String
  unit: String
}

type WorkableArea {
  type: String
  valueAsDouble: String
  unit: String
}

type Extent {
  type: String
  topLeft: Point
  bottomRight: Point
}

type Ring {
  type: String
  points: [Point]
}

type Polygon {
  type: String
  rings: [Ring]
}
#Here ends the schema definition of Boundary

#Here begins the schema definition of Client
type Client {
  #total: Int
  name: String
  links: [Link]
  id: ID
  archived: Boolean
}

type Link {
  #type: String
  rel: String
  uri: String
}
#Here ends the schema definition of Client

#Here begins the schema definition of Client
type Field {
  type: String
  name: String
  archived: Boolean
  id: ID
  links: [Link]
}
#Here ends the schema definition of Client

#Here begins the schema definition of Client

 type Machine {
   id: ID
   vin: String
   name: String
   engineSerialNumber: String
   telematicsState: String
   externalID: String
 }

 #Here ends the schema definition of Client

#Here begins the schema definition of Frarm
 type Farm {
    type: String
    name: String
    archived: Boolean
    clientUri: String
    id: ID
    links: [Link]
 }

  #Here ends the schema definition of Farm

  #Here begins the schema definition of Farm

  type organization {
    #Deere have 2 types of type, uno is @type, the other is type. I don't know why someone in the world would use @type.
    type: String
    name: String
    member: Boolean
    internal: Boolean
    id: ID
    links: [Link]
  }

  #Here ends the schema definition of Farm

type Query {
  #listBoundaries(organizationId: ID!, fieldId: ID!): Boundary @function(name: "listBoundaries-${env}") #If we need to list all boundaries for a organization, we can modify and use this query.
  #listMachines(organizationId: ID!): String @function(name: "listMachines-${env}")
  #getMachine(organizationId: ID!, machineId: ID!): Machine @function(name: "getMachine-${env}")
  listOrganizations: [organization] @function(name: "functionsDeereApi-${env}")
  listClients(organizationId: ID!): [Client] @function(name: "functionsDeereApi-${env}")
  getClient(organizationId: ID!, clientId: ID!): Client @function(name: "functionsDeereApi-${env}")
  listFarms(organizationId: ID!): [Farm] @function(name: "functionsDeereApi-${env}")
  getFarm(organizationId: ID!, farmId: ID!): Farm @function(name: "functionsDeereApi-${env}")
  listFields(organizationId: ID!): [Field] @function(name: "functionsDeereApi-${env}")
  getField(organizationId: ID!, fieldId: String!): Field @function(name: "functionsDeereApi-${env}")
  getBoundary(organizationId: ID!, fieldId: ID!): Boundary @function(name: "functionsDeereApi-${env}")
  autenticationDeere: AWSJSON @function(name: "autenticationDeere-${env}")
  getAuthorizationToken(code: String!): String @function(name: "getAuthorizationToken-${env}")
}